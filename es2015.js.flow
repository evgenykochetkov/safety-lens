/* @flow */

import { id, lens } from './lens'

import type { Identity, Lens, Lens_, Pure_, Traversal, Traversal_ } from './lens'
import type { Functor, Pure } from './lib/fantasy-land'

/* arrays */

function index<A>(idx: number): Traversal_<A[],A> {
  return f => (pure, array) => {
    if (typeof array[idx] !== 'undefined') {
      return f(pure, array[idx]).map(updatedValue => (
        array.map((v, i) => i === idx ? updatedValue : v)
      ))
    }
    else {
      return pure(array)
    }
  }
}


/* objects */

/*
 * Access a property in an object. Flow will emit an error if the named property
 * is not a member of the target object type.
 */
function prop<S:Object,T:Object,A,B>(name: $Keys<S> | $Keys<T>): Lens<S,T,A,B> {
  return (key(name): any)  // cast from `Traversal` to `Lens`
}

/*
 * Access a property in an object. With this version, flow will not check if the
 * property exists in the target type. Use `key` instead of `prop` when the
 * target is used as a map (as opposed to a record), or when an undefined result
 * is acceptable.
 */
function key<A,B>(name: string): Traversal<{ [key: string]: A },{ [key: string]: A|B },A,B> {
  return lens(
    obj => obj[name],
    (obj, val) => {
      const newObj = {}
      for (const k of Object.keys(obj)) {
        if (k !== name) { newObj[k] = obj[k] }
      }
      if (typeof val !== 'undefined') {
        newObj[name] = val
      }
      return newObj
    }
  )
}


/* tuples */

// Lens<[A,B],[C,B],A,C>
function _1
<A,B,C, FB: Functor<C>, FT: Functor<[C,B]>>
(f: (pure: Pure_, val: A) => FB): ((pure: Pure_, obj: [A,B]) => FT) {
  return (pure, [a,b]) => (
    f(pure, a).map(c => [c,b])
  )
}

// Lens<[A,B],[A,C],B,C>
function _2
<A,B,C, FB: Functor<C>, FT: Functor<[A,C]>>
(f: (pure: Pure_, val: B) => FB): ((pure: Pure_, obj: [A,B]) => FT) {
  return (pure, [a,b]) => (
    f(pure, b).map(c => [a,c])
  )
}


/* Promise */

// Setting<Promise<A>,Promise<B>,A,B>
function success<A,B>
(f: (pure: Pure, val: A) => Identity<B>): ((pure: Pure, obj: Promise<A>) => Identity<Promise<B>>) {
  return (pure, promise) => pure(promise.then(a => f(pure, a).value))
}

// Setting<Promise<X>,Promise<X>,A,B>
function failure<A,B>
(f: (pure: Pure, val: A) => Identity<B>): ((pure: Pure, obj: Promise<A>) => Identity<Promise<B>>) {
  return (pure, promise) => pure(promise.then(id, a => Promise.reject(f(pure, a).value)))
}

export {
  index,
  key,
  prop,
  _1,
  _2,
  success,
  failure,
}
