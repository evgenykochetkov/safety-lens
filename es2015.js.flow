/* @flow */

import { lens } from './lens'

import type { Lens, Lens_, Traversal_ } from './lens'

export {
  index,
  key,
  prop,
  _1,
  _2,
}

/* arrays */

function index<A>(idx: number): Traversal_<A[],A> {
  return f => (pure, array) => {
    if (typeof array[idx] !== 'undefined') {
      return f(pure, array[idx]).map(updatedValue => (
        array.map((v, i) => i === idx ? updatedValue : v)
      ))
    }
    else {
      return pure(array)
    }
  }
}


/* objects */

/*
 * Access a property in an object. Flow will emit an error if the named property
 * is not a member of the target object type.
 */
function prop<S:Object,T:Object,A,B>(name: $Enum<S> | $Enum<T>): Lens<S,T,A,B> {
  return key(name)
}

/*
 * Access a property in an object. With this version, flow will not check if the
 * property exists in the target type. Use `key` instead of `prop` when the
 * target is used as a map (as opposed to a record), or when an undefined result
 * is acceptable.
 */
function key<S:Object,T:Object,A,B>(name: string): Lens<S,T,A,B> {
  return lens(
    obj => obj[name],
    (obj, val) => {
      const newObj = {}
      for (const k of Object.keys(obj)) {
        if (k !== name) { newObj[k] = obj[k] }
      }
      if (typeof val !== 'undefined') {
        newObj[name] = val
      }
      return newObj
    }
  )
}


/* tuples */

function _1<A,B,C>(): Lens<[A,B],[C,B],A,C> {
  return lens(
    ([a,_]) => a,
    ([_,b], c) => [c,b]
  )
}

function _2<A,B,C>(): Lens<[A,B],[A,C],B,C> {
  return lens(
    ([_,b]) => b,
    ([a,_], c) => [a,c]
  )
}


